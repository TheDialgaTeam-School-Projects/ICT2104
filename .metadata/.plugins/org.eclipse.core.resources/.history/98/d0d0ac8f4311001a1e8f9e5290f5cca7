#include "msp.h"
#include "clock.h"
#include "sen0189.h"
#include "MQ135.h"
#include "DS18B20.h"
#include "dht11.h"
#include "hc_sr04.h"
#include "relay.h"
#include <stdio.h>

void setup_timer(void);
void setup_led(void);

volatile signed int turbidity_percentage = 0;
volatile float co2_percentage;
volatile float dsb_temp; // in water
volatile float dht_temp; //DHT11 temp

volatile uint16_t timer_a1 = 0;
volatile uint16_t timer_a3 = 0;
char object[50];

int main(void)
{
    disable_watchdog();

    setup_dco();

    setup_dsb();

    setup_turbidity();                                     // Configure pins for SEN0189

    setup_relay();

    hc_sr04_config config;

    config.trigger_port_sel0 = &P4SEL0;
    config.trigger_port_sel1 = &P4SEL1;
    config.trigger_port_dir = &P4DIR;
    config.trigger_port_out = &P4OUT;
    config.trigger_port_pin = BIT3;

    config.echo_port_sel0 = &P2SEL0;
    config.echo_port_sel1 = &P2SEL1;
    config.echo_port_dir = &P2DIR;
    config.echo_port_pin = BIT4;

    config.threshold = 14;
    config.frequency = 12000000;

    initialize_ultrasonic_sensor(&config);

    setup_timer();
    setup_led();

    __enable_irq();                                        // Enable global interrupt

    __DSB();                                               // Ensures SLEEPONEXIT takes effect immediately

    while (1)
    {
        if(is_object_found()){
            object = "true";
        }
        else{
            object = "false";
        }

        if ((turbidity_percentage >= 70 && co2_percentage > 20.0) || dsb_temp > 30.0 || ((dht_temp - dsb_temp) > 7) || dsb_temp < 23.0)
        {
            P2->OUT = BIT0;
        }
        else if (turbidity_percentage > 70 || co2_percentage > 20.0)
        {
            P2->OUT = BIT0 + BIT1;
        }
        else if (is_object_found())
        {
            P2->OUT = BIT2;
        }
        else
        {
            P2->OUT = BIT1;
        }
    }
}

void setup_led(void)
{
    // PxSEL0/1 = 0 (Simple I/O)
    P2->SEL0 &= ~(BIT0 + BIT1 + BIT2);
    P2->SEL1 &= ~(BIT0 + BIT1 + BIT2);

    /*
     * LED 2 - RED 2.0 | Green 2.1 | Blue 2.2
     * P2->DIR |= BIT0 + BIT1 + BIT2; (Output)
     * P2->OUT = BIT0; (RED)
     * P2->OUT = BIT1; (Green)
     * P2->OUT = BIT2; (Blue)
     * P2->OUT = BIT0 + BIT1; (Yellow)
     * P2->OUT = BIT0 + BIT2; (Purple)
     * P2->OUT = BIT1 + BIT2; (Cyan)
     * P2->OUT = BIT0 + BIT1 + BIT2; (White)
     */
    P2->DIR |= BIT0 + BIT1 + BIT2;
}

void setup_timer(void)
{
    /*
     * Timer A1 Control Register
     * TASSEL: SMCLK
     * ID: Input divider for clock /1
     * MC: Up mode
     * TACLR: Clear
     * TAIE: Enable overflow interrupt
     */
    TIMER_A1->CTL |= TASSEL_2 | ID_0 | MC_1 | TACLR | TAIE;

    /*
     * Timer A1 Up mode counter.
     * Count to 1ms.
     */
    TIMER_A1->CCR[0] = 12000000 / 1000;

    NVIC->ISER[0] |= 1 << ((TA1_N_IRQn) & 31);

    /*
     * Timer A3 Control Register
     * TASSEL: SMCLK
     * ID: Input divider for clock /1
     * MC: Up mode
     * TACLR: Clear
     * TAIE: Enable overflow interrupt
     */
    TIMER_A3->CTL |= TASSEL_2 | ID_0 | MC_1 | TACLR | TAIE;

    /*
     * Timer A3 Up mode counter.
     * Count to 1ms.
     */
    TIMER_A3->CCR[0] = 12000000 / 1000;

    NVIC->ISER[0] |= 1 << ((TA3_N_IRQn) & 31);
}

void TA1_N_IRQHandler(void)
{
    if (TIMER_A1->CTL & TIMER_A_CTL_IFG) {
        // 1ms trigger.
        timer_a1++;

        if (timer_a1 >= 60) {
            // if 60ms has passed.
            timer_a1 = 0;

            // Start sampling/conversion
            ADC14->CTL0 |= ADC14_CTL0_ENC | ADC14_CTL0_SC;

            trigger_ultrasonic();
        }

        TIMER_A1->CTL &= ~TIMER_A_CTL_IFG;
    }
}

void TA3_N_IRQHandler(void)
{
    if (TIMER_A3->CTL & TIMER_A_CTL_IFG) {
        // 1ms trigger.
        timer_a3++;

        if (timer_a3 >= 1000) {
            // if 1s has passed.
            timer_a3 = 0;

            dsb_temp = read_dsb();
            dht_temp = readTempSensor();
        }

        TIMER_A3->CTL &= ~TIMER_A_CTL_IFG;
    }
}

// ADC14 interrupt service routine
void ADC14_IRQHandler(void)
{
    if ((ADC14->IFGR0 & ADC14_IFGR0_IFG0) == ADC14_IFGR0_IFG0)
    {
        turbidity_percentage = calculate_turbidity(ADC14->MEM[0]);

        if (turbidity_percentage >= 70) {
            activate_relay();
        } else {
            deactivate_relay();
        }

        setup_CO2Sesnsor();

        ADC14->CLRIFGR0 &= ~ADC14_IFGR0_IFG0;
    }

    if ((ADC14->IFGR0 & ADC14_IFGR0_IFG1) == ADC14_IFGR0_IFG1)
    {
        co2_percentage = getCO2percentage(ADC14->MEM[1]);

        setup_turbidity();

        ADC14->CLRIFGR0 &= ~ADC14_IFGR0_IFG1;
    }
}
